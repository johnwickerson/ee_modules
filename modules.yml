- code: ELEC40002
  name: Analysis and Design of Circuits
  ilos:
    1: "Explain the basic physics underlying the operation of the following electronic components: resistor, capacitor, inductor, diode, transistor"
    2: "Perform DC analysis of circuits containing combinations of the above components to establish the nodal voltages and branch currents"
    3: "Perform AC analysis of circuits containing combinations of the above components, using small-signal equivalent models to linearise any non-linear elements"
    4: "Apply the operation of simple transistor level circuits including amplifier stages and logic gates"
    5: "Analyse basic opamp circuits containing idealised opamps and passive components"
    6: "Apply the concept of a transfer function and derive the transfer functions for a range of standard filter circuits"
    7: "Analyse the transient behaviour of 1st order RC and RL networks"
    8: "Use SPICE to simulate the behaviour of the circuits you have studied"
    9: "Appreciate where and how the circuits you have studied are applied in real engineering applications"

- code: ELEC40003
  name: Digital Electronics and Computer Architecture
  ilos: 
    1: "design significant synchronous sequential digital circuits using registers and combinational logic"
    2: "design simple twoâ€™s complement addition and subtraction digital circuits, with correct use of carry and overflow"
    3: "use digital blocks: RAMs, ROMs, registers, adders, multiplexers and state machines to design and analyse the operation of simple pipelined RISC computer systems"
    4: "model the operation of machine code instructions on a CPU at register-transfer level, and manipulate data using different numeric representations"
    5: "write programs for arithmetic operations, manipulating bit fields within words, accessing memory, and calling subroutines"
    6: "implement I/O in embedded computer systems using polling"
    
- code: ELEC40004
  name: Programming for Engineers
  ilos:
    1: "use the fundamental components of imperative programming in terms of control-flow structures and variables"
    2: "design and implement a C++ program that communicates using file-based IO in a CLI environment"
    3: "verify the correct behaviour of programs"
    4: "diagnose and fix incorrect behaviour and crashes"
    5: "select and use data-structures from the STL according to needed performance and functionality"
    6: "use APIs, encapsulation, and abstraction to manage software complexity"
    7: "design object-oriented data-structures to capture real-world problems"			
