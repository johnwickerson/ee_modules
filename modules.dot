// This is an auto-generated file. Don't edit this file; edit `modules.yml` instead.

digraph {
  node[shape=record, style="filled"];
  node[color="#99d8c9", fillcolor="#e5f5f9"];
  ELEC40002 [label="{ELEC40002 | Analysis and Design of Circuits | {
    <1>Explain the basic\nphysics underlying\nthe operation of the\nfollowing electronic\ncomponents:\nresistor, capacitor,\ninductor, diode,\ntransistor |
    <2>Perform DC analysis\nof circuits\ncontaining\ncombinations of the\nabove components to\nestablish the nodal\nvoltages and branch\ncurrents |
    <3>Perform AC analysis\nof circuits\ncontaining\ncombinations of the\nabove components,\nusing small-signal\nequivalent models to\nlinearise any\nnon-linear elements |
    <4>Apply the operation\nof simple transistor\nlevel circuits\nincluding amplifier\nstages and logic\ngates |
    <5>Analyse basic opamp\ncircuits containing\nidealised opamps and\npassive components |
    <6>Apply the concept\nof a transfer\nfunction and derive\nthe transfer\nfunctions for a\nrange of standard\nfilter circuits |
    <7>Analyse the\ntransient behaviour\nof 1st order RC and\nRL networks |
    <8>Use SPICE to\nsimulate the\nbehaviour of the\ncircuits you have\nstudied |
    <9>Appreciate where\nand how the circuits\nyou have studied are\napplied in real\nengineering\napplications
  }}"];

  ELEC40003 [label="{ELEC40003 | Digital Electronics and Computer Architecture | {
    <1>design significant\nsynchronous\nsequential digital\ncircuits using\nregisters and\ncombinational logic |
    <2>design simple\ntwoâ€™s complement\naddition and\nsubtraction digital\ncircuits, with\ncorrect use of carry\nand overflow |
    <3>use digital blocks:\nRAMs, ROMs,\nregisters, adders,\nmultiplexers and\nstate machines to\ndesign and analyse\nthe operation of\nsimple pipelined\nRISC computer\nsystems |
    <4>model the operation\nof machine code\ninstructions on a\nCPU at\nregister-transfer\nlevel, and\nmanipulate data\nusing different\nnumeric\nrepresentations |
    <5>write programs for\narithmetic\noperations,\nmanipulating bit\nfields within words,\naccessing memory,\nand calling\nsubroutines |
    <6>implement I/O in\nembedded computer\nsystems using\npolling
  }}"];

  ELEC40004 [label="{ELEC40004 | Programming for Engineers | {
    <1>use the fundamental\ncomponents of\nimperative\nprogramming in terms\nof control-flow\nstructures and\nvariables |
    <2>design and\nimplement a C++\nprogram that\ncommunicates using\nfile-based IO in a\nCLI environment |
    <3>verify the correct\nbehaviour of\nprograms |
    <4>diagnose and fix\nincorrect behaviour\nand crashes |
    <5>select and use\ndata-structures from\nthe STL according to\nneeded performance\nand functionality |
    <6>use APIs,\nencapsulation, and\nabstraction to\nmanage software\ncomplexity |
    <7>design\nobject-oriented\ndata-structures to\ncapture real-world\nproblems
  }}"];

  ELEC40006 [label="{ELEC40006 | Electronics Design Project | {
    <1>Capture and analyse\na set of high-level\nrequirements to\nproduce a set of\ndesign\nspecifications |
    <2>Apply theoretical\nprinciples and\nlaboratory skills to\ndesign, build and\ntest a solution to\nan engineering\ndesign problem,\nwithin practical\nconstraints |
    <3>Integrate analogue,\ndigital and software\ntheory and design\ntechniques into a\nfunctioning system |
    <4>Organise workload\nand manage time by\nfunctioning as an\nengineering team and\ndecomposing the\ndesign challenge\ninto subsystems |
    <5>Formulate and\nimplement a test\nplan to evaluate a\ndesign against its\nspecifications |
    <6>Communicate process\nand outcomes to\nstakeholders using\nvarious forms of\ncommunication\n(reports,\npresentations,\nreviews, etc.)
  }}"];
}
